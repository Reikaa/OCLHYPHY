/*---------------------------------------------------------------------------------------------------------------------*/varCount = Abs(COVARIANCE_PARAMETER);usedVars = Rows(COVARIANCE_PARAMETER);inflationFactor = -1;while (inflationFactor <= 0){	fprintf (stdout, "Inflation factor for profile likelihood bounds (>0.0):");	fscanf (stdin,"Number",inflationFactor);}fprintf (stdout, "\nObtaining profile likeihood bounds...\n");svpc = COVARIANCE_PRECISION;COVARIANCE_PRECISION = 0.95;ExecuteCommands ("CovarianceMatrix (covMx, "+LF_NAME+");");profileString = "";profileString * 128;profileString * "Parameter, Lower Bound, MLE, Upper Bound";for (k=0; k<varCount; k=k+1){	profileString * ("\n"+usedVars[k]+","+covMx[k][0]+","+covMx[k][1]+","+covMx[k][2]);}profileString * 0;k = baseResPath+".profile";fprintf (k,CLEAR_FILE,profileString);profileString = 0;COVARIANCE_PRECISION = svpc;stashedValues = {varCount,4};assignmentString = "";assignmentString * 256;for (k=0; k<varCount; k=k+1){	aKey 			    = usedVars[k];	ExecuteCommands 	("GetInformation(varRange,"+aKey+");");	stashedValues[k][0] = covMx[k][1];	stashedValues[k][1] = Max(covMx[k][1]-(covMx[k][1]-covMx[k][0])*inflationFactor,varRange[1]);	stashedValues[k][2] = Min(covMx[k][1]+(covMx[k][2]-covMx[k][1])*inflationFactor,varRange[2]);	stashedValues[k][3] = (stashedValues[k][2]-stashedValues[k][1])/SAMPLE_N;	assignmentString * (aKey+ "=generatedSamples[itCount]["+k+"];\n");}assignmentString * 0;varCount	= Rows (covMx);generatedSamples = {SAMPLE_N,varCount};indexVector		 = {1,SAMPLE_N};for (k=0; k<SAMPLE_N; k=k+1){	indexVector[k] = k;}fprintf (stdout, "\nDoing Latin hypercube sampling...\n");for (k=0; k<varCount; k=k+1){	permVector = Random (indexVector,1);	lb = stashedValues[k][1];	st = stashedValues[k][3];	for (m = 0; m<SAMPLE_N; m=m+1)	{		generatedSamples[m][k] = lb+st*permVector[m];	}}#include "srs.ibf";