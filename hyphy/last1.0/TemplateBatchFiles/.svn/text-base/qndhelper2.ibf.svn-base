fprintf (stdout,"\n\n______________READ THE FOLLOWING DATA______________\n",ds,				"\n\nPhase 1:Nucleotide Model (",ModelTitle,") Model Fit\n\n");if (nrChoice == 0){	LikelihoodFunction nucLF = (nucData,givenTree);	Optimize (res,nucLF);	stashLOF = LIKELIHOOD_FUNCTION_OUTPUT ;	LIKELIHOOD_FUNCTION_OUTPUT  = 6;	if (Abs(NUC_FILE_PATH))	{		fprintf (NUC_FILE_PATH,CLEAR_FILE,nucLF);	}	LIKELIHOOD_FUNCTION_OUTPUT  = stashLOF;}fprintf (stdout, "\n",nucLF);fprintf (stdout, "\n\nPhase 2:MG94x(",ModelTitle,") Model Fit\n\n");				CodonMatrix = {ModelMatrixDimension,ModelMatrixDimension};hshift = 0;for (h=0; h<64; h=h+1){	if (_Genetic_Code[h]==10) 	{		hshift = hshift+1;		continue; 	}	vshift = hshift;	for (v = h+1; v<64; v=v+1)	{		diff = v-h;		if (_Genetic_Code[v]==10) 		{			vshift = vshift+1;			continue; 		}		nucPosInCodon = 2;		if ((h$4==v$4)||((diff%4==0)&&(h$16==v$16))||(diff%16==0))		{			if (h$4==v$4)			{				transition = v%4;				transition2= h%4;			}			else			{				if(diff%16==0)				{					transition = v$16;					transition2= h$16;					nucPosInCodon = 0;				}				else				{					transition = v%16$4;					transition2= h%16$4;					nucPosInCodon = 1;				}			}			if (transition<transition2)			{				trSM = transition;				trLG = transition2;			}			else			{				trSM = transition2;				trLG = transition;			}						if (trSM==0)			{				if (trLG==1)				{					if (_Genetic_Code[0][h]==_Genetic_Code[0][v]) 					{						CodonMatrix[h-hshift][v-vshift] := AC__*synRate*positionFrequencies__[transition__][nucPosInCodon__];						CodonMatrix[v-vshift][h-hshift] := AC__*synRate*positionFrequencies__[transition2__][nucPosInCodon__];					}					else					{						CodonMatrix[h-hshift][v-vshift] := AC__*dNdS*synRate*positionFrequencies__[transition__][nucPosInCodon__];						CodonMatrix[v-vshift][h-hshift] := AC__*dNdS*synRate*positionFrequencies__[transition2__][nucPosInCodon__];					}				}				else				{					if (trLG==2)					{						if (_Genetic_Code[0][h]==_Genetic_Code[0][v]) 						{							CodonMatrix[h-hshift][v-vshift] := synRate*positionFrequencies__[transition__][nucPosInCodon__];							CodonMatrix[v-vshift][h-hshift] := synRate*positionFrequencies__[transition2__][nucPosInCodon__];						}						else						{							CodonMatrix[h-hshift][v-vshift] := dNdS*synRate*positionFrequencies__[transition__][nucPosInCodon__];							CodonMatrix[v-vshift][h-hshift] := dNdS*synRate*positionFrequencies__[transition2__][nucPosInCodon__];						}												}					else					{						if (_Genetic_Code[0][h]==_Genetic_Code[0][v]) 						{							CodonMatrix[h-hshift][v-vshift] := AT__*synRate*positionFrequencies__[transition__][nucPosInCodon__];							CodonMatrix[v-vshift][h-hshift] := AT__*synRate*positionFrequencies__[transition2__][nucPosInCodon__];						}						else						{							CodonMatrix[h-hshift][v-vshift] := AT__*dNdS*synRate*positionFrequencies__[transition__][nucPosInCodon__];							CodonMatrix[v-vshift][h-hshift] := AT__*dNdS*synRate*positionFrequencies__[transition2__][nucPosInCodon__];						}												}				}			}			else			{				if (trSM==1)				{					if (trLG==2)					{						if (_Genetic_Code[0][h]==_Genetic_Code[0][v]) 						{							CodonMatrix[h-hshift][v-vshift] := CG__*synRate*positionFrequencies__[transition__][nucPosInCodon__];							CodonMatrix[v-vshift][h-hshift] := CG__*synRate*positionFrequencies__[transition2__][nucPosInCodon__];						}						else						{							CodonMatrix[h-hshift][v-vshift] := CG__*dNdS*synRate*positionFrequencies__[transition__][nucPosInCodon__];							CodonMatrix[v-vshift][h-hshift] := CG__*dNdS*synRate*positionFrequencies__[transition2__][nucPosInCodon__];						}					}					else					{						if (_Genetic_Code[0][h]==_Genetic_Code[0][v]) 						{							CodonMatrix[h-hshift][v-vshift] := CT__*synRate*positionFrequencies__[transition__][nucPosInCodon__];							CodonMatrix[v-vshift][h-hshift] := CT__*synRate*positionFrequencies__[transition2__][nucPosInCodon__];						}						else						{							CodonMatrix[h-hshift][v-vshift] := CT__*dNdS*synRate*positionFrequencies__[transition__][nucPosInCodon__];							CodonMatrix[v-vshift][h-hshift] := CT__*dNdS*synRate*positionFrequencies__[transition2__][nucPosInCodon__];						}												}				}				else				{					if (_Genetic_Code[0][h]==_Genetic_Code[0][v]) 					{						CodonMatrix[h-hshift][v-vshift] := GT__*synRate*positionFrequencies__[transition__][nucPosInCodon__];						CodonMatrix[v-vshift][h-hshift] := GT__*synRate*positionFrequencies__[transition2__][nucPosInCodon__];					}					else					{						CodonMatrix[h-hshift][v-vshift] := GT__*dNdS*synRate*positionFrequencies__[transition__][nucPosInCodon__];						CodonMatrix[v-vshift][h-hshift] := GT__*dNdS*synRate*positionFrequencies__[transition2__][nucPosInCodon__];					}											}			}		}   }}		Model MGModel   = (CodonMatrix,codonFrequencies,0);Tree  codonTree = treeString;/* compute the branch conversion factor */synRate = 1;blCodon = 0;for (h=0; h<ModelMatrixDimension; h=h+1){	blCodon = blCodon - CodonMatrix[h][h]*codonFrequencies[h];}blNuc = 0;t = 1;for  (h=0; h<4; h=h+1){	blCodon2 = 0;	for (v=0; v<4; v=v+1)	{		if (h==v)		{			continue;		}		blCodon2 = blCodon2 + NucleotideMatrix[h][v]*overallFrequencies[v];	}	blNuc = blNuc + overallFrequencies[h]*blCodon2;}LikelihoodFunction lf = (filteredData,codonTree);if (rOptions>=2){	dNdS = 2;	blCodon2 = 0;	for (h=0; h<ModelMatrixDimension; h=h+1)	{		blCodon2 = blCodon2 - CodonMatrix[h][h]*codonFrequencies[h];	}		blCodon2 = blCodon2-blCodon;	blCodon  = blCodon-blCodon2;		dNdS = 0.5;		fprintf (stdout, "\n\nPhase 3:Estimating dN/dS\n\n");	if (rOptions == 4)	{		global 	   rConstr := 3*blNuc__/(blCodon__+dNdS*blCodon2__);		ExecuteCommands ("ReplicateConstraint(\"this1.?.synRate:=rConstr*this2.?.t__\",codonTree,givenTree)");	}	else	{		global 		   rConstr = 1; /*3*blNuc/(blCodon+dNdS*blCodon2)*/;		rConstr :> 0;		ExecuteCommands ("ReplicateConstraint(\"this1.?.synRate:=this2.?.t__*rConstr\",codonTree,givenTree)");	}		saveOM = SKIP_CONJUGATE_GRADIENT;	SKIP_CONJUGATE_GRADIENT = 1;		/*saveLFO = LIKELIHOOD_FUNCTION_OUTPUT;	LIKELIHOOD_FUNCTION_OUTPUT = 6;	fprintf ("debug.out",CLEAR_FILE,lf);	LIKELIHOOD_FUNCTION_OUTPUT = saveLFO;*/		Optimize (resC,lf);	SKIP_CONJUGATE_GRADIENT = saveOM;	fprintf (stdout, "\nNuc->codon scaling factor:", (3*blNuc/(blCodon+dNdS*blCodon2)),"\nRaw scaling factor:", rConstr, "\nTree scaling factor(S): ", rConstr/(3*blNuc/(blCodon+dNdS*blCodon2)));	if (rOptions == 3 || rOptions == 5)	{		COVARIANCE_PRECISION = 0.95;		ClearConstraints(codonTree);		ReplicateConstraint("this1.?.synRate:=rConstr__*this2.?.t__",codonTree,givenTree);		savedNdS = dNdS;		COVARIANCE_PARAMETER = "dNdS";		CovarianceMatrix (covMx, lf);			fprintf (stdout,"\n\nUsing dN/dS=", dNdS, "(Estimated 95% CI = [", covMx[0][0], "," , covMx[0][2], "])\nCodon model:", lf);		dNdS = savedNdS;		COVARIANCE_PARAMETER = 0;	}	else	{		fprintf (stdout,"\n\nUsing dN/dS=", dNdS, "\nCodon model:", lf);		}}else{	blNuc = 3*blNuc/blCodon;		if (pipeThroughFlag == 0)	{		global 		   rConstr = 1;		rConstr :> 0;		fprintf (stdout, "Branch Corrections Factor (<0 to estimate):");		fscanf  (stdin,  "Number", rConstr);	}		if (rConstr<=0.0)	{		rConstr = blNuc;		ReplicateConstraint("this1.?.synRate:=this2.?.t__*rConstr",codonTree,givenTree);		dNdS := dNdS__;		saveOM = SKIP_CONJUGATE_GRADIENT;		SKIP_CONJUGATE_GRADIENT = 1;		Optimize (resC,lf);		SKIP_CONJUGATE_GRADIENT = saveOM;		dNdS = dNdS;	}	else	{		ReplicateConstraint("this1.?.synRate:=this2.?.t__*rConstr__",codonTree,givenTree);		}	fprintf (stdout, "\nNuc->Codon branch correction factor: ", blNuc);	fprintf (stdout, "\nRaw scaling factor: ", rConstr);	fprintf (stdout, "\nTree scaling factor(S): ", rConstr/blNuc);	fprintf (stdout,"\n\nUsing dN/dS=", dNdS, "\nCodon model:", lf);}