# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.31
#
# Don't modify this file, modify the SWIG interface instead.
# This file is compatible with both classic and new-style classes.

import _HyPhy
import new
new_instancemethod = new.instancemethod
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'PySwigObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError,name

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

import types
try:
    _object = types.ObjectType
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0
del types


THYPHY_TYPE_COUNT = _HyPhy.THYPHY_TYPE_COUNT
THYPHY_TYPE_STRING = _HyPhy.THYPHY_TYPE_STRING
THYPHY_TYPE_NUMBER = _HyPhy.THYPHY_TYPE_NUMBER
THYPHY_TYPE_MATRIX = _HyPhy.THYPHY_TYPE_MATRIX
class _THyPhyReturnObject(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, _THyPhyReturnObject, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, _THyPhyReturnObject, name)
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    def myType(*args): return _HyPhy._THyPhyReturnObject_myType(*args)
    __swig_destroy__ = _HyPhy.delete__THyPhyReturnObject
    __del__ = lambda self : None;
    def castToString(*args): return _HyPhy._THyPhyReturnObject_castToString(*args)
    def castToNumber(*args): return _HyPhy._THyPhyReturnObject_castToNumber(*args)
    def castToMatrix(*args): return _HyPhy._THyPhyReturnObject_castToMatrix(*args)
_THyPhyReturnObject_swigregister = _HyPhy._THyPhyReturnObject_swigregister
_THyPhyReturnObject_swigregister(_THyPhyReturnObject)

class _THyPhyString(_THyPhyReturnObject):
    __swig_setmethods__ = {}
    for _s in [_THyPhyReturnObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, _THyPhyString, name, value)
    __swig_getmethods__ = {}
    for _s in [_THyPhyReturnObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, _THyPhyString, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _HyPhy.new__THyPhyString(*args)
        try: self.this.append(this)
        except: self.this = this
    def myType(*args): return _HyPhy._THyPhyString_myType(*args)
    __swig_destroy__ = _HyPhy.delete__THyPhyString
    __del__ = lambda self : None;
    __swig_setmethods__["sLength"] = _HyPhy._THyPhyString_sLength_set
    __swig_getmethods__["sLength"] = _HyPhy._THyPhyString_sLength_get
    if _newclass:sLength = _swig_property(_HyPhy._THyPhyString_sLength_get, _HyPhy._THyPhyString_sLength_set)
    __swig_setmethods__["sData"] = _HyPhy._THyPhyString_sData_set
    __swig_getmethods__["sData"] = _HyPhy._THyPhyString_sData_get
    if _newclass:sData = _swig_property(_HyPhy._THyPhyString_sData_get, _HyPhy._THyPhyString_sData_set)
_THyPhyString_swigregister = _HyPhy._THyPhyString_swigregister
_THyPhyString_swigregister(_THyPhyString)

class _THyPhyNumber(_THyPhyReturnObject):
    __swig_setmethods__ = {}
    for _s in [_THyPhyReturnObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, _THyPhyNumber, name, value)
    __swig_getmethods__ = {}
    for _s in [_THyPhyReturnObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, _THyPhyNumber, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _HyPhy.new__THyPhyNumber(*args)
        try: self.this.append(this)
        except: self.this = this
    def myType(*args): return _HyPhy._THyPhyNumber_myType(*args)
    __swig_destroy__ = _HyPhy.delete__THyPhyNumber
    __del__ = lambda self : None;
    __swig_setmethods__["nValue"] = _HyPhy._THyPhyNumber_nValue_set
    __swig_getmethods__["nValue"] = _HyPhy._THyPhyNumber_nValue_get
    if _newclass:nValue = _swig_property(_HyPhy._THyPhyNumber_nValue_get, _HyPhy._THyPhyNumber_nValue_set)
_THyPhyNumber_swigregister = _HyPhy._THyPhyNumber_swigregister
_THyPhyNumber_swigregister(_THyPhyNumber)

class _THyPhyMatrix(_THyPhyReturnObject):
    __swig_setmethods__ = {}
    for _s in [_THyPhyReturnObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, _THyPhyMatrix, name, value)
    __swig_getmethods__ = {}
    for _s in [_THyPhyReturnObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, _THyPhyMatrix, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _HyPhy.new__THyPhyMatrix(*args)
        try: self.this.append(this)
        except: self.this = this
    def myType(*args): return _HyPhy._THyPhyMatrix_myType(*args)
    __swig_destroy__ = _HyPhy.delete__THyPhyMatrix
    __del__ = lambda self : None;
    def MatrixCell(*args): return _HyPhy._THyPhyMatrix_MatrixCell(*args)
    __swig_setmethods__["mRows"] = _HyPhy._THyPhyMatrix_mRows_set
    __swig_getmethods__["mRows"] = _HyPhy._THyPhyMatrix_mRows_get
    if _newclass:mRows = _swig_property(_HyPhy._THyPhyMatrix_mRows_get, _HyPhy._THyPhyMatrix_mRows_set)
    __swig_setmethods__["mCols"] = _HyPhy._THyPhyMatrix_mCols_set
    __swig_getmethods__["mCols"] = _HyPhy._THyPhyMatrix_mCols_get
    if _newclass:mCols = _swig_property(_HyPhy._THyPhyMatrix_mCols_get, _HyPhy._THyPhyMatrix_mCols_set)
    __swig_setmethods__["mData"] = _HyPhy._THyPhyMatrix_mData_set
    __swig_getmethods__["mData"] = _HyPhy._THyPhyMatrix_mData_get
    if _newclass:mData = _swig_property(_HyPhy._THyPhyMatrix_mData_get, _HyPhy._THyPhyMatrix_mData_set)
_THyPhyMatrix_swigregister = _HyPhy._THyPhyMatrix_swigregister
_THyPhyMatrix_swigregister(_THyPhyMatrix)

class _THyPhy(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, _THyPhy, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, _THyPhy, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _HyPhy.new__THyPhy(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _HyPhy.delete__THyPhy
    __del__ = lambda self : None;
    def ExecuteBF(*args): return _HyPhy._THyPhy_ExecuteBF(*args)
    def InitTHyPhy(*args): return _HyPhy._THyPhy_InitTHyPhy(*args)
    def ClearAll(*args): return _HyPhy._THyPhy_ClearAll(*args)
    def AskFor(*args): return _HyPhy._THyPhy_AskFor(*args)
    def DumpResult(*args): return _HyPhy._THyPhy_DumpResult(*args)
    def CanCast(*args): return _HyPhy._THyPhy_CanCast(*args)
    def CastResult(*args): return _HyPhy._THyPhy_CastResult(*args)
    def SetCallbackHandler(*args): return _HyPhy._THyPhy_SetCallbackHandler(*args)
    def GetCallbackHandler(*args): return _HyPhy._THyPhy_GetCallbackHandler(*args)
    def GetWarnings(*args): return _HyPhy._THyPhy_GetWarnings(*args)
    def GetErrors(*args): return _HyPhy._THyPhy_GetErrors(*args)
    def GetStdout(*args): return _HyPhy._THyPhy_GetStdout(*args)
    def PushWarning(*args): return _HyPhy._THyPhy_PushWarning(*args)
    def PushError(*args): return _HyPhy._THyPhy_PushError(*args)
    def PushOutString(*args): return _HyPhy._THyPhy_PushOutString(*args)
_THyPhy_swigregister = _HyPhy._THyPhy_swigregister
_THyPhy_swigregister(_THyPhy)

_THyPhyGetLongStatus = _HyPhy._THyPhyGetLongStatus
_THyPhyGetStringStatus = _HyPhy._THyPhyGetStringStatus
_THyPhyGetDoubleStatus = _HyPhy._THyPhyGetDoubleStatus

cvar = _HyPhy.cvar

